{"name":"Pickmeup","tagline":"Meteor demo with geolocation and Google Maps.","body":"## PickMeUp Meteor Demo\r\n\r\nI built this demo app to evaluate Meteor.  You can skip to the [Review Notes](#review_notes) below.\r\n\r\n### Background \r\n\r\nIn a previous job I built something very similar to [Meteor][meteor_link] using [Python][python_link] & [CouchDB][couch_link].  I wanted to evaluate Meteor with something beyond a simple chat application, to see how easy it would be to cover some of the real-world use cases I hit before.  Meteor is full-stack, although you can swap out some of the parts as wrappers become available.\r\n\r\n[meteor_link]:https://www.meteor.com/main\r\n[python_link]:https://www.python.org/\r\n[couch_link]:http://couchdb.apache.org/\r\n\r\n### Application Use Case\r\n\r\nAfter work my wife picks me up from the bus stop.  I wanted an app to track where I was and notify her a few minutes before I reach the stop.  She should have a webapp that alerts her when I arrive, and I should be able to send my location from either my laptop, tablet or smartphone.\r\n\r\n### Try the Demo\r\n\r\nMeteor hosts meteor apps for free, so PickMeUp is on pickmeup.meteor.com and pickmeup.meteor.com/bus.\r\n\r\nPickMeUp two pages--a [bus rider view][pme_bus] is required, and the [pickup view][pme_home] is optional.  Open both.\r\n\r\nSomeone needs to share their location on the [bus rider view][pme_bus], so if you don't see a map after a few seconds, tell you browser to allow your coordinates.  If you already see a map, don't share your location.\r\n\r\nThe destination is hard-coded to [Magnolia Bakery][bakery] in New York City, not my real bus stop.\r\n\r\nThe maps have markers for current location and destination, and the buttons outside the map control zoom.  These are separate for each view.\r\n\r\nThe \"send alert\" and \"send alert now\" buttons manually toggle a simple alert notice.  This is synced between views.\r\n\r\n[pme_bus]:http://pickmeup.meteor.com/bus\r\n[pme_home]:http://pickmeup.meteor.com/\r\n[bakery]:http://www.magnoliabakery.com/\r\n\r\n### Approach\r\n\r\nI used [Bootstrap 3][bs3] to get easy mobile-first design, through the [meteor-bootstrap-3 plugin][mb3]. (I had tried [a plugin with Bootstrap 3 less][mb3l], but when it didn't immediately work, I used the other.)\r\n\r\n[Iron Router][ir] handles the multiple webapp views as different pages.\r\n\r\nI used raw HTML5 geolocation, and will package that as a Meteor plugin.\r\n\r\nI used Google Maps API v3 to drive a map live.  It's too custom to package in its current form, but it's a good example of how to avoid Google Maps having 0 height, flickering when Meteor re-renders, the map showing all gray and a few other gotchas that make integration annoying. \r\n\r\n[bs3]:http://getbootstrap.com/\r\n[mb3]:https://github.com/mangasocial/meteor-bootstrap-3\r\n[mb3l]:https://github.com/simison/bootstrap3-less\r\n[ir]:https://github.com/EventedMind/iron-router\r\n\r\n### <a name=\"review_notes\"/>Review Notes\r\n\r\nI found that Meteor is stable, has an active community, and great tool chain support.  I was able to complete the vast majority of this project, from scratch, over a weekend.  It uses things you probably already know, or all well documented, like [Handlebars][handlebars], [Underscore][underscore], [jQuery][jQuery] and [mongoDB][mongoDB].  You get javascript on both the server and client side, so your front-end developers can contribute to the back-end, or at least read the code.  Making packages is easy with [Atmosphere][atmosphere], which has helped get some some useful 3rd party tools integrated (like Bootstrap[bs3]).  It's reactive first, which means you don't need to seek out javascript developers who have already been through the pain of building real webapps, and not just session machines that push templates from Java or PHP. Webapps are reactive, and there's some learning curve in terms of structuring things.  Meteor helps with that A LOT, and for that it's worth learning, even if you're firmly planted in a Python/Django shop.\r\n\r\n#### Coming up to speed\r\n\r\nNew javascript/node programmers should be able to come up to speed quickly.  Organization is open and light, which is a trade-off.  Today, it means you don't need Meteor experts.  Longer term it means every project will have a different organization, which will burn time bringing new people on board, or (re)documenting your architecture.\r\n\r\nTo minimize this, it's a good idea to package pieces of your app as real packages, even if you don't share them openly.  This will help impose some natural organization as your app grows. Isolated tests become easier too.\r\n\r\n#### Invisible Magic\r\n\r\nThe heart of Meteor is a systematic mapping of mongoDB collections to handlebars, using invisible magic.  I'm never a fan of invisible magic in platforms, but it has strong benefits in getting started quickly.  Meteor exposes things like [Handlebars][handlebars] perfectly, but completely hides things like [SockJS][sockjs].  That's normally fine.  But use jQuery in a Template you'll see that there are \"wrong\" things and \"right\" things to do that aren’t obvious. It appears much of this will get addressed by release 1, but some is inherent in the design.\r\n\r\n#### Data Models\r\n\r\nReactive systems need to finely segment data to make targeted updates at the clients.  Meteor is no exception.  For instance, a `Session` object is given to make reactive data NOT synced between clients.  It's not really good for Session stuff that isn't reactive, so don't do that--you'll inadvertently trigger updates elsewhere.  If you aren't careful to specify simple enough data to use `Session.equals()`, you'll trigger many reactive updates.  For instance, the [docs][docs] point out that if you consistently use\r\n\r\n```\r\nSession.get(\"key\") === value\r\n```\r\n\r\nyou will trigger a reactive update on every Template function that uses that pattern when any Session key updates.  Instead use\r\n\r\n```\r\nSession.equals(\"key\", value)\r\n````\r\n\r\nwhich will only update Template functions that share the same key.\r\n\r\nThis isn't extensible in the following case (where Geolocation is used instead of Session):\r\n\r\n```\r\n  var location = Geolocation.findOne();\r\n  if( location !== undefined && 'alert' in location ) {\r\n    return location.alert;\r\n  }\r\n  return false;\r\n```\r\n\r\nSo making individual atomic keys is better, which ultimately means using flat data architectures.\r\nThis is generally true for reactive programming, and not expensive with almost any NoSQL backend.  But most examples of Meteor over use Session because it's convenient.  So those parts won't necessarily scale or work well together. And packages are free to pollute the Session name space.\r\n\r\nThe solution is fine-grain control over the rendering, which requires some handlebars black magic (like #isolate, #constant).  A declarative method for stating dependencies would require overhead and initial learning, but would go a long way to avoiding the slow expertise you need to develop when tripping over the best-practices you don't know yet.\r\n\r\n#### Service-Oriented Architecture\r\n\r\n[SOA][soa] for webapps over websockets is a topic unto itself.  As a full-stack tool, Meteor will require some code to map 3rd party APIs to reactive sources.  It was easy enough to use Google Maps V3 API, and you can use Meteor.http() for other RESTful calls.  With the support behind Meteor, I expect many packages will be wrapped in a useful way.  For now, the full benefit is only seen by fork-lifting the results of RESTful calls into a Collection.  This is a level of indirection, requires some server-side code that will become boilerplate (unless you call from the client and overload Session), and yields a light performance hit.\r\n\r\nYou wouldn't really use Meteor to create an SOA API, it’s not for that.\r\n\r\n#### Testing\r\n\r\nAs a rapid prototype, I didn't use [Test Driven Development][tdd].  My philosophy on that is: learn by doing, build by testing. This was a learning exercise.  But to build a product I'm a big advocate of TDD.  To package the geolocation stuff, I'd start with the test cases and rebuild it robustly.\r\n\r\nThere are a few Meteor test tools.  The most promising looks like [Laika][laika], which uses [PhantomJS][phantomjs] for client manipulation.  You can use [Mocha][mocha] and all your favorite node tools, but Laika duplicates a lot of the magic Meteor runs for you, so you don’t just get a ton of undeclared variable errors.\r\n\r\n### Why I didn't use CoffeeScript\r\n\r\nSimply put, there are more Javascript programmers than CoffeeScript programmers.  I like hiring and working with programmers who read the code they're using, so it's more helpful to write in language more people can read.  I don't have a strong opinion of which is \"best\"--there will be both, and Meteor works with both.\r\n\r\n[handlebars]:http://handlebarsjs.com/\r\n[underscore]:http://underscorejs.org/\r\n[jQuery]:http://jquery.com/\r\n[mongoDB]:https://www.mongodb.org/\r\n[atmosphere]:https://atmosphere.meteor.com/\r\n[bs3]:http://getbootstrap.com/\r\n[sockjs]:https://github.com/sockjs\r\n[docs]:http://docs.meteor.com/#session_equals\r\n[soa]:http://en.wikipedia.org/wiki/Service-oriented_architecture\r\n[tdd]:http://en.wikipedia.org/wiki/Test-driven_development\r\n[laika]:http://arunoda.github.io/laika/\r\n[phantomjs]:http://phantomjs.org/\r\n[mocha]:http://visionmedia.github.io/mocha/\r\n\r\n## Conclusion\r\n\r\nFor now, learning Meteor is great to see how reactive programming of webapps works in the real world.  It’s also good for small projects.  It’s new, but the odds of it getting to production quality look very good, so it’s worth getting some skills together now.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}